// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: recipe.query.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addIngredient = `-- name: AddIngredient :one
INSERT INTO "ingredient" ("name", "quantity", "recipeId")
VALUES ($1, $2, $3)
RETURNING id, name, quantity, "recipeId", "createdAt", "updatedAt"
`

type AddIngredientParams struct {
	Name     string    `json:"name"`
	Quantity string    `json:"quantity"`
	RecipeId uuid.UUID `json:"recipeId"`
}

func (q *Queries) AddIngredient(ctx context.Context, arg AddIngredientParams) (Ingredient, error) {
	row := q.db.QueryRow(ctx, addIngredient, arg.Name, arg.Quantity, arg.RecipeId)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Quantity,
		&i.RecipeId,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const addStep = `-- name: AddStep :one
INSERT INTO "step" ("instruction", "stepNumber", "recipeId")
VALUES ($1, $2, $3)
RETURNING id, instruction, "stepNumber", "recipeId", "createdAt", "updatedAt"
`

type AddStepParams struct {
	Instruction string    `json:"instruction"`
	StepNumber  int32     `json:"stepNumber"`
	RecipeId    uuid.UUID `json:"recipeId"`
}

func (q *Queries) AddStep(ctx context.Context, arg AddStepParams) (Step, error) {
	row := q.db.QueryRow(ctx, addStep, arg.Instruction, arg.StepNumber, arg.RecipeId)
	var i Step
	err := row.Scan(
		&i.ID,
		&i.Instruction,
		&i.StepNumber,
		&i.RecipeId,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO "recipe" ("name", "description", "userId")
VALUES ($1, $2, $3)
RETURNING id, name, description, "userId", "createdAt", "updatedAt"
`

type CreateRecipeParams struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	UserId      uuid.UUID `json:"userId"`
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRow(ctx, createRecipe, arg.Name, arg.Description, arg.UserId)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserId,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRecipeById = `-- name: DeleteRecipeById :exec
DELETE FROM "recipe" WHERE "id"=$1
`

func (q *Queries) DeleteRecipeById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRecipeById, id)
	return err
}

const getRecipe = `-- name: GetRecipe :one
SELECT id, name, description, "userId", "createdAt", "updatedAt" FROM "recipe" WHERE "id" = $1
`

func (q *Queries) GetRecipe(ctx context.Context, id uuid.UUID) (Recipe, error) {
	row := q.db.QueryRow(ctx, getRecipe, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserId,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listIngredientsByRecipe = `-- name: ListIngredientsByRecipe :many
SELECT id, name, quantity, "recipeId", "createdAt", "updatedAt" FROM "ingredient"
WHERE "recipeId" = $1
ORDER BY "createdAt" ASC
`

func (q *Queries) ListIngredientsByRecipe(ctx context.Context, recipeid uuid.UUID) ([]Ingredient, error) {
	rows, err := q.db.Query(ctx, listIngredientsByRecipe, recipeid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Quantity,
			&i.RecipeId,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecipes = `-- name: ListRecipes :many
SELECT id, name, description, "userId", "createdAt", "updatedAt" FROM "recipe"
ORDER BY "createdAt" DESC
`

func (q *Queries) ListRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.Query(ctx, listRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UserId,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStepsByRecipe = `-- name: ListStepsByRecipe :many
SELECT id, instruction, "stepNumber", "recipeId", "createdAt", "updatedAt" FROM "step"
WHERE "recipeId" = $1
ORDER BY "stepNumber" ASC
`

func (q *Queries) ListStepsByRecipe(ctx context.Context, recipeid uuid.UUID) ([]Step, error) {
	rows, err := q.db.Query(ctx, listStepsByRecipe, recipeid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Step
	for rows.Next() {
		var i Step
		if err := rows.Scan(
			&i.ID,
			&i.Instruction,
			&i.StepNumber,
			&i.RecipeId,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
